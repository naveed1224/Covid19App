<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%- include('../includes/head.ejs') %>
    <title>Covid Front End Project</title>
</head>

<body>
    <%- include('../includes/navigation.ejs') %>
    <div class="uk-alert-danger" uk-alert style="margin-top: 0px; margin-bottom: 0;">
        <a class="uk-alert-close" uk-close></a>
        <center>
            <p>Please Visit Privacy Policy and About page for important information regarding this Web App and our
                Mission.
            </p>
        </center>
    </div>

    <div id="modal-group-1" uk-modal>
        <div class="uk-modal-dialog">
            <button class="uk-modal-close-default" type="button" uk-close></button>
            <div class="uk-modal-header">
                <h2 class="uk-modal-title">Anonymous Submission Details</h2>
            </div>
            <div class="uk-modal-body">
                <div class="uk-alert-danger" uk-alert>
                    <a class="uk-alert-close" uk-close></a>
                    <p>Please do not include any Confidential information.</p>
                </div>

                <form class="uk-grid-small" uk-grid action="http://localhost:3000/case/case-create" method="POST">
                    <div class="uk-width-1-1">
                        <div id="custom-search-input">
                            <div class="input-group">
                                <div id="locationField">
                                    <input id="autocomplete" placeholder="Enter case address(Autocomplete Enabled)"
                                        type="text" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="uk-width-1-2@s">
                        <input id="lat__case_submit" class="uk-input uk-form-width-medium" type="text"
                            placeholder="Lat">
                    </div>
                    <div class="uk-width-1-2@s">
                        <input id="lng__case_submit" class="uk-input uk-form-width-medium" type="text"
                            placeholder="lng">
                    </div>
                    <!-- <div class="uk-margin">
                        <input class="uk-input uk-form-width-large" type="text" placeholder="Enter any title">
                    </div> -->
                    <div class="uk-margin" style="margin-bottom: 0px;">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: mail"></span>
                            <input id="email__case" class="uk-input uk-form-width-large" type="email">
                        </div>
                    </div>
                    <div class="uk-margin">
                        <textarea id="case__description" class="uk-textarea uk-form-width-large" rows="5"
                            placeholder="Please provide a description"></textarea>
                    </div>
                    <!-- <input id="lat__case_submit" type="text" value="">
                    <input id="lng__case_submit" type="text" value=""> -->
            </div>
            <div class="uk-modal-footer uk-text-right">
                <button class="uk-button uk-button-default uk-modal-close" type="button">Cancel</button>
                <button id="case__submit__button" class="uk-button uk-button-primary" type="button">Submit</button>
                <!-- <a id="saveandviews1" href="" class="uk-button uk-button-primary" uk-toggle>Save</a> -->
            </div>
            </form>
        </div>
    </div>
    <div id="modal-group-2" uk-modal>
        <div class="uk-modal-dialog">
            <button class="uk-modal-close-default" type="button" uk-close></button>
            <div class="uk-modal-header">
                <h2 class="uk-modal-title">Anonomously Inform Somebody</h2>
            </div>
            <div class="uk-modal-body">
                <div class="uk-alert-warning" uk-alert>
                    <a class="uk-alert-close" uk-close></a>
                    <p>Please Note you will not be able to send this user an Anonymous Email Message Again(Please see
                        privacy page).</p>
                </div>
                <form action="">
                    <div class="uk-margin">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: mail"></span>
                            <input class="uk-input uk-form-width-large" type="email">
                        </div>
                    </div>
                    <div class="uk-margin">
                        <textarea class="uk-textarea uk-form-width-large" rows="5" placeholder="Email Body"></textarea>
                    </div>
                </form>
            </div>
            <div class="uk-modal-footer uk-text-right">
                <button class="uk-button uk-button-default uk-modal-close" type="button">Cancel</button>
                <button class="uk-button uk-button-primary" type="button">Save</button>
            </div>
        </div>
    </div>

    <!-- <div class="spinner" id="spinner__main__parent">
        <span id="spinner__main" uk-spinner="ratio: 10"></span>
    </div> -->
    <div id="__googleMapsFrontPage">
        <div>
            <input id="pac-input" class="controls" type="text" placeholder="Search Box">
        </div>
        <div id="map"></div>
    </div>

    <%- include('../includes/end.ejs') %>
    <script>
        var placeSearch, autocomplete;

        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };



        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            let lat = place.geometry.location.lat();
            let lng = place.geometry.location.lng();
            console.log(lat + " - " + lng);

            for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }

        //--------------------------------------------


        function initAutocomplete() {
            // ---------------------
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), {
                    types: ['geocode']
                });

            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            autocomplete.setFields(['address_component', 'geometry']);

            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            autocomplete.addListener('place_changed', () => {
                var place = this.autocomplete.getPlace();
                let lat = place.geometry.location.lat();
                let lng = place.geometry.location.lng();
                document.getElementById("lat__case_submit").value = lat;
                document.getElementById("lng__case_submit").value = lng;
                console.log(lat + " - " + lng);
            });
            //autocomplete.addListener('place_changed', fillInAddress);
            var place = autocomplete.getPlace();


            // let lat = document.getElementById('lat').value = place.geometry.location.lat();
            // let lng = document.getElementById('lon').value = place.geometry.location.lng();
            // console.log(lat + " - " + lng);

            // ----------------------

            var map;
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {
                    lat: -33.8688,
                    lng: 151.2195
                },
                zoom: 13,
                mapTypeId: 'roadmap',
                mapTypeControl: false
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            console.log('hello');
            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();
                console.log('hello')
                console.log(places);


                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }

                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    }));

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });

            var center;

            function calculateCenter() {
                center = map.getCenter();
            }
            google.maps.event.addDomListener(map, 'idle', function () {
                calculateCenter();
            });
            google.maps.event.addDomListener(window, 'resize', function () {
                map.setCenter(center);
            });
        }
    </script>
    <script>
        UIkit.modal("#modal-group-1");
    </script>

</body>

</html>