<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <%- include('../includes/head.ejs') %>
    <title>Covid Front End Project</title>
</head>

<body>
    <%- include('../includes/navigation.ejs') %>
    <div class="uk-alert-danger" uk-alert style="margin-top: 0px; margin-bottom: 0;">
        <a class="uk-alert-close" uk-close></a>
        <center>
            <p>Please Visit Privacy Policy and About page for important information regarding this Web App and our
                Mission.
            </p>
        </center>
    </div>

    <div id="modal-group-1" uk-modal>
        <div class="uk-modal-dialog">
            <button class="uk-modal-close-default" type="button" uk-close></button>
            <div class="uk-modal-header">
                <h2 class="uk-modal-title">Anonymous Submission Details</h2>
            </div>
            <div class="uk-modal-body">
                <div class="uk-alert-danger" uk-alert>
                    <a class="uk-alert-close" uk-close></a>
                    <p>Please do not include any Confidential information.</p>
                </div>

                <form class="uk-grid-small" uk-grid action="http://localhost:3000/case/case-create" method="POST">
                    <span class="uk-label">Case Address</span>
                    <div class="uk-width-1-1">
                        <div id="custom-search-input">
                            <div class="input-group">
                                <div id="locationField">
                                    <input class="autoaddress" id="autocomplete"
                                        placeholder="Enter case address(Autocomplete Enabled)" type="text" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="uk-margin" style="margin-bottom: 0px;">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: location"></span>
                            <input id="neigbborhood__case__name" class="uk-input uk-form-width-large" type="text"
                                placeholder="Neibhorhood Autocomplete Enabled" disabled>
                        </div>
                    </div>
                    <div class="uk-margin" style="margin-bottom: 0px;">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: location"></span>
                            <input id="city__case__name" class="uk-input uk-form-width-large" type="text"
                                placeholder="city Autocomplete Enabled" disabled>
                        </div>
                    </div>
                    <div class="uk-margin" style="margin-bottom: 0px;">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: location"></span>
                            <input id="province__case__name" class="uk-input uk-form-width-large" type="text"
                                placeholder="Province Autocomplete Enabled" disabled>
                        </div>
                    </div>
                    <div class="uk-margin" style="margin-bottom: 0px;">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: location"></span>
                            <input id="country__case__name" class="uk-input uk-form-width-large" type="text"
                                placeholder="country Autocomplete Enabled" disabled>
                        </div>
                    </div>
                    <div class="uk-margin" style="margin-bottom: 0px;">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: location"></span>
                            <input id="lat__case_submit" class="uk-input uk-form-width-large" type="text"
                                placeholder="Lat Autocomplete Enabled" disabled>
                        </div>
                    </div>
                    <div class="uk-margin">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: location"></span>
                            <input id="lng__case_submit" class="uk-input uk-form-width-large" type="text"
                                placeholder="Lng Autocomplete Enabled" disabled>
                        </div>
                    </div>

                    <span class="uk-label">Email Confirmation</span>
                    <div class="uk-margin" style="margin-bottom: 0px;">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: mail"></span>
                            <input id="email__case" class="uk-input uk-form-width-large" type="email"
                                placeholder="Enter Email.">
                        </div>
                    </div>

            </div>
            <div class="uk-modal-footer uk-text-right">
                <button class="uk-button uk-button-default uk-modal-close" type="button">Cancel</button>
                <button id="case__submit__button" class="uk-button uk-button-primary" type="button">Submit</button>
                <!-- <a id="saveandviews1" href="" class="uk-button uk-button-primary" uk-toggle>Save</a> -->
            </div>
            </form>
        </div>
    </div>
    <div id="modal-group-2" uk-modal>
        <div class="uk-modal-dialog">
            <button class="uk-modal-close-default" type="button" uk-close></button>
            <div class="uk-modal-header">
                <h2 class="uk-modal-title">Anonomously Inform Somebody</h2>
            </div>
            <div class="uk-modal-body">
                <div class="uk-alert-warning" uk-alert>
                    <a class="uk-alert-close" uk-close></a>
                    <p>Please Note you will not be able to send this user an Anonymous Email Message Again(Please see
                        privacy page).</p>
                </div>
                <form action="">
                    <div class="uk-margin">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: mail"></span>
                            <input id="email__inform__address" class="uk-input uk-form-width-large" type="email">
                        </div>
                    </div>
                    <div class="uk-margin">
                        <textarea id="email__inform__body" class="uk-textarea uk-form-width-large" rows="5"
                            placeholder="Email Body"></textarea>
                    </div>
            </div>
            <div class="uk-modal-footer uk-text-right">
                <button class="uk-button uk-button-default uk-modal-close" type="button">Cancel</button>
                <button id="email__inform__send" class="uk-button uk-button-primary" type="button">Send</button>
            </div>
            </form>
        </div>
    </div>

    <div id="modal-group-3" uk-modal>
        <div class="uk-modal-dialog">
            <button class="uk-modal-close-default" type="button" uk-close></button>
            <div class="uk-modal-header">
                <h4 class="uk-modal-title">Case notifications Signup</h4>
            </div>
            <div class="uk-modal-body">
                <div class="uk-alert-warning" uk-alert>
                    <a class="uk-alert-close" uk-close></a>
                    <p>Please check your spam if you do not see an email.</p>
                </div>

                <form action="">
                    <span class="uk-label uk-label-danger">Email Confirmation Required</span>
                    <div class="uk-margin">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: mail"></span>
                            <input id="email__signup__address" class="uk-input uk-form-width-large" type="email">
                        </div>
                    </div>
                    <div class="uk-margin">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: receiver"></span>
                            <input id="phone__signup__address" class="uk-input uk-form-width-large" type="email">
                        </div>
                    </div>
                    <span class="uk-label uk-label-danger">Location Details Required</span>

                    <div class="uk-width-1-1" style="margin-top: 20px;">
                        <div id="custom-search-input2">
                            <div class="input-group2">
                                <div id="locationField2">
                                    <input class="autoaddress" id="autocomplete"
                                        placeholder="Enter address - Autocomplete Enabled" type="text" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div style="margin-top:20px">
                        <span class="uk-label uk-label-danger">Only City and Neihborhood details stored</span>
                    </div>

                    <div class="uk-margin">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: location"></span>
                            <input id="neibhorhood__signup__address" class="uk-input uk-form-width-large" type="text"
                                placeholder="neighborhood - Autopopulate" disabled>
                        </div>
                    </div>
                    <div class="uk-margin">
                        <div class="uk-inline">
                            <span class="uk-form-icon" uk-icon="icon: location"></span>

                            <input id="city__signup__address" class="uk-input uk-form-width-large" type="text"
                                placeholder="City - Autopopulate" disabled>
                        </div>
                    </div>
            </div>
            <div class="uk-modal-footer uk-text-right">
                <button class="uk-button uk-button-default uk-modal-close" type="button">Cancel</button>
                <button id="email__signup__send" class="uk-button uk-button-primary" type="button">Signup</button>
            </div>
            </form>
        </div>
    </div>

    <!-- <div class="spinner" id="spinner__main__parent">
        <span id="spinner__main" uk-spinner="ratio: 10"></span>
    </div> -->
    <div class="uk-margin-left uk-margin-right ">
        <ul uk-accordion>
            <li class="uk-open">
                <a class="uk-accordion-title" href="#">Case Stats</a>
                <div class="uk-accordion-content">
                    <div class="uk-margin">
                        <center><a id="case__refresh__stats__button" href="#" uk-icon="icon: refresh ; ratio: 1"
                                uk-tooltip="title: Refresh Case Stats; pos: top"></a>
                        </center>
                    </div>
                    <div id="case__stats__results">

                    </div>
                </div>
            </li>
        </ul>
    </div>

    <div id="__googleMapsFrontPage">
        <div>
            <input id="pac-input" class="controls" type="text" placeholder="Search address">
        </div>
        <div id="map"></div>
    </div>


    <%- include('../includes/end.ejs') %>
    <script>
        var placeSearch, autocomplete;

        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };



        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();

            let lat = place.geometry.location.lat();
            let lng = place.geometry.location.lng();


            for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }


        function initAutocomplete() {
            var lat;
            var lng;
            navigator.geolocation.getCurrentPosition((position) => lat = position.coords.latitude)
            navigator.geolocation.getCurrentPosition((position) => lat = position.coords.longitude)


            var input = document.getElementsByClassName('autoaddress');

            for (var x = 0; x < input.length; x++) {
                addListener(input[x]);
            }

            function addListener(el) {
                var autocomplete = new google.maps.places.Autocomplete(el);

                google.maps.event.addListener(autocomplete, 'place_changed', function () {
                    var modalopen1 = document.getElementById('modal-group-1')
                    var modalopen3 = document.getElementById('modal-group-3')
                    // Do whatever you want in here e.g.
                    var place = autocomplete.getPlace();
                    let lat = place.geometry.location.lat();
                    let lng = place.geometry.location.lng();
                    if (modalopen3.className.split(" ")[1] === 'uk-open') {
                        //`https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lng}&key=AIzaSyDwnOhxGhY8GyY4qUbVcsPu9TMNEOcKM_U`
                        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?types=address&access_token=sk.eyJ1IjoibmF2ZWVkMTIyNCIsImEiOiJja2FrMXZjMzgwazlpMnBsZXJxZjM3eWNqIn0.0QIofdUNltBvKIjPqMzE3A`, {
                                method: "GET",
                            })
                            .then(result => {
                                return result.json()
                            })
                            .then(result => {
                                let firstCondition = false;
                                var neibhorhood_address = document.getElementById(
                                    'neibhorhood__signup__address')
                                var city_address = document.getElementById(
                                    'city__signup__address')
                                for (var x in result.features[0].context) {
                                    if (result.features[0].context[x].id.split(".")[0] ===
                                        'neighborhood') {
                                        neibhorhood_address.value = result.features[0].context[x].text
                                    }
                                    if (result.features[0].context[x].id.split(".")[0] === 'place') {
                                        city_address.value = result.features[0].context[x].text
                                    }
                                }
                            })
                    }
                    if (modalopen1.className.split(" ")[1] === 'uk-open') {
                        document.getElementById("lat__case_submit").value = lat;
                        document.getElementById("lng__case_submit").value = lng;
                        fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?types=address&access_token=sk.eyJ1IjoibmF2ZWVkMTIyNCIsImEiOiJja2FrMXZjMzgwazlpMnBsZXJxZjM3eWNqIn0.0QIofdUNltBvKIjPqMzE3A`, {
                                method: "GET"
                            })
                            .then(result => {
                                return result.json()
                            })
                            .then(result => {
                                //DOM Elements
                                const city_address = document.getElementById("city__case__name")
                                const neibhorhood_address = document.getElementById(
                                    "neigbborhood__case__name")
                                const province_address = document.getElementById(
                                    "province__case__name")
                                const country_address = document.getElementById(
                                    "country__case__name")

                                for (var x in result.features[0].context) {
                                    if (result.features[0].context[x].id.split(".")[0] ===
                                        'neighborhood') {
                                        neibhorhood_address.value = result.features[0].context[x].text
                                    }
                                    if (result.features[0].context[x].id.split(".")[0] === 'place') {
                                        city_address.value = result.features[0].context[x].text
                                        secondCondition = true;
                                    }
                                    if (result.features[0].context[x].id.split(".")[0] === 'region') {
                                        province_address.value = result.features[0].context[x].text
                                    }
                                    if (result.features[0].context[x].id.split(".")[0] === 'country') {
                                        country_address.value = result.features[0].context[x].text
                                    }
                                }
                            })
                    }

                });
            }

            try {

                var map;
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: {
                        lat: 43.5774294,
                        lng: -79.5643868
                    },
                    zoom: 12,
                    mapTypeId: 'roadmap',
                    mapTypeControl: false
                });
            } catch (err) {
                console.log(err)
            }
            // Create the search box and link it to the UI element.
            try {
                var input = document.getElementById('pac-input');
                var searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);
            } catch (err) {
                console.log(err)
            }

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            try {
                searchBox.addListener('places_changed', function () {
                    var places = searchBox.getPlaces();
                    if (places.length == 0) {
                        return;
                    }

                    markers = [];

                    // For each place, get the icon, name and location.
                    var bounds = new google.maps.LatLngBounds();
                    places.forEach(function (place) {
                        if (!place.geometry) {
                            return;
                        }

                        var icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25)
                        };

                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });
                    map.fitBounds(bounds);
                });
            } catch (err) {
                console.log(err)
            }
            try {
                fetch('http://localhost:3000/case/viewCases', {
                        method: 'GET',
                        headers: {
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        }
                    })
                    .then(response => {
                        return response.json();
                    })
                    .then(data => {
                        var x;

                        for (x in data.cases) {
                            var infowindow = new google.maps.InfoWindow();
                            var marker = new google.maps.Marker({
                                position: {
                                    lat: data.cases[x].lat,
                                    lng: data.cases[x].lng
                                },
                                map: map,
                                title: data.cases[x].createdAt
                            });
                            marker.addListener('mouseover', function () {
                                infowindow.setContent(`
                            <div id="content">
                                <div id="siteNotice">
                            </div>
                                    <h4 id="firstHeading" class="firstHeading">Anonymous Case</h4>
                                    <div id="bodyContent">
                                        <p><b>Case Type: </b>Anonymous Submission</p>
                                        <p><b>Date Created: </b>${this.title}</p>
                                    </div>
                                </div>
                                `);
                                infowindow.open(map, this);
                            });
                        }
                    })
                    .catch(err => {
                        console.log(err)
                    })
            } catch {
                console.log(err)
            }

            var center;

            function calculateCenter() {
                center = map.getCenter();
            }
            google.maps.event.addDomListener(map, 'idle', function () {
                calculateCenter();
            });
            google.maps.event.addDomListener(window, 'resize', function () {
                map.setCenter(center);
            });
        }
    </script>
    <script>
        UIkit.modal("#modal-group-1");
    </script>

</body>

</html>